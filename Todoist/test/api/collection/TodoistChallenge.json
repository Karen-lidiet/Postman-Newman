{
	"info": {
		"_postman_id": "2523dd98-1bd1-4806-9fcd-6028f4d61524",
		"name": "Todoist Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "End to end testing",
			"item": [
				{
					"name": "Create Task",
					"item": [
						{
							"name": "Create Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var taskid = pm.response.json().id;\r",
											"pm.environment.set(\"taskId\", taskid);\r",
											"\r",
											"\r",
											"pm.test(\"Task name should match with name set in the env variable \", function(){\r",
											"var taskName = pm.environment.get(\"taskName\");\r",
											"var taskContent = pm.response.json().content;\r",
											"pm.expect(taskContent).to.eql(taskName);\r",
											"})\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"assigner\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"project_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"section_id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"order\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"content\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"completed\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"label_ids\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"priority\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"comment_count\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"creator\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"created\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"url\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"assigner\",\r",
											"    \"project_id\",\r",
											"    \"section_id\",\r",
											"    \"order\",\r",
											"    \"content\",\r",
											"    \"completed\",\r",
											"    \"label_ids\",\r",
											"    \"priority\",\r",
											"    \"comment_count\",\r",
											"    \"creator\",\r",
											"    \"created\",\r",
											"    \"url\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer $token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"{{taskName}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Task",
					"item": [
						{
							"name": "Get active tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Task should be not completed\", function(){\r",
											"    var jsonData = pm.response.json();\r",
											"    jsonData.forEach(task => pm.expect(task.completed).to.eql(false));\r",
											"})\r",
											"\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"assigner\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"project_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"section_id\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"order\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"content\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"completed\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"label_ids\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"priority\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"comment_count\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"creator\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"created\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"url\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"assigner\",\r",
											"        \"project_id\",\r",
											"        \"section_id\",\r",
											"        \"order\",\r",
											"        \"content\",\r",
											"        \"completed\",\r",
											"        \"label_ids\",\r",
											"        \"priority\",\r",
											"        \"comment_count\",\r",
											"        \"creator\",\r",
											"        \"created\",\r",
											"        \"url\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"\r",
											"var data = pm.response.json();\r",
											"pm.test('Schema is valid', function () {\r",
											"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an active task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var id1 = pm.environment.get(\"taskId\");",
											"",
											"pm.test(\"task ID is correct\", function(){",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.id).to.eql(id1);",
											"})",
											"",
											"var schema = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"assigner\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"project_id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"section_id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"order\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"content\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"completed\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"label_ids\": {",
											"      \"type\": \"array\",",
											"      \"items\": {}",
											"    },",
											"    \"priority\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"comment_count\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"creator\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"created\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"url\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"assigner\",",
											"    \"project_id\",",
											"    \"section_id\",",
											"    \"order\",",
											"    \"content\",",
											"    \"completed\",",
											"    \"label_ids\",",
											"    \"priority\",",
											"    \"comment_count\",",
											"    \"creator\",",
											"    \"created\",",
											"    \"url\"",
											"  ]",
											"}",
											"",
											"var data = pm.response.json();",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(tv4.validate(data, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Task",
					"item": [
						{
							"name": "Update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"content\": \"updated_Task\"\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change a task status to 'complete'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}/close",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reopen a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}/reopen",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Task",
					"item": [
						{
							"name": "Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 2xx\", function () {",
							"    pm.response.to.be.success;",
							"});",
							"",
							"pm.test(\"Response time is less than 800ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative scenarios",
			"item": [
				{
					"name": "Negative Create Task",
					"item": [
						{
							"name": "Negative scenario Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer $token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"due_lang\": \"aaa\"\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Get Task",
					"item": [
						{
							"name": "Negative Get active tasks Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Forbidden\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "0001",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Get an active task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/444444",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"444444"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Update Task",
					"item": [
						{
							"name": "Negative Update task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"completed\": true\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Change a task status to 'complete'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}/inprogress",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}",
										"inprogress"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negative Reopen a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}/open",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}",
										"open"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Delete Task",
					"item": [
						{
							"name": "Negative Delete task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/0101010101",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"0101010101"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 700ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(700);",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}